pgshell# explain analyse SELECT title FROM movie WHERE year = 2020;
movie
1
QUERY PLAN     
---------------
Seq Scan on movie  (cost=0.00..213.96 rows=1 width=15) (actual time=0.371..0.372 rows=0 loops=1)
  Filter: (year = 2020)
  Rows Removed by Filter: 7997
Planning Time: 0.030 ms
Execution Time: 0.375 ms
pgshell# explain analyse SELECT title FROM movie WHERE year = 2020;
movie
1
QUERY PLAN     
---------------
Seq Scan on movie  (cost=0.00..213.96 rows=1 width=15) (actual time=0.403..0.403 rows=0 loops=1)
  Filter: (year = 2020)
  Rows Removed by Filter: 7997
Planning Time: 0.044 ms
Execution Time: 0.415 ms
pgshell# Index (movie2) created for movie("title")
explain analyse SELECT title FROM movie WHERE year = 2020;
movie
1
QUERY PLAN     
---------------
Seq Scan on movie  (cost=0.00..213.96 rows=1 width=15) (actual time=0.548..0.549 rows=0 loops=1)
  Filter: (year = 2020)
  Rows Removed by Filter: 7997
Planning Time: 0.042 ms
Execution Time: 0.558 ms
pgshell# explain analyse SELECT title FROM movie WHERE year = 2020;
movie
1
QUERY PLAN     
---------------
Seq Scan on movie  (cost=0.00..213.96 rows=1 width=15) (actual time=0.563..0.563 rows=0 loops=1)
  Filter: (year = 2020)
  Rows Removed by Filter: 7997
Planning Time: 0.040 ms
Execution Time: 0.572 ms
pgshell# \q











mknined@expectnothing:~/Desktop/Database/CS349-Project/code$ ./run
pgshell# explain analyse SELECT movie_id, avg_rating FROM ratings WHERE avg_rating > 8.0;
ratings
2
QUERY PLAN     
---------------
Seq Scan on ratings  (cost=0.00..158.96 rows=249 width=16) (actual time=0.002..0.446 rows=249 loops=1)
  Filter: (avg_rating > 8.0)
  Rows Removed by Filter: 7748
Planning Time: 0.033 ms
Execution Time: 0.453 ms
pgshell# explain analyse SELECT movie_id, avg_rating FROM ratings WHERE avg_rating > 8.0;
ratings
2
QUERY PLAN     
---------------
Seq Scan on ratings  (cost=0.00..158.96 rows=249 width=16) (actual time=0.006..0.445 rows=249 loops=1)
  Filter: (avg_rating > 8.0)
  Rows Removed by Filter: 7748
Planning Time: 0.035 ms
Execution Time: 0.455 ms
pgshell# Index (ratings2) created for ratings("avg_rating", "movie_id")
explain analyse SELECT movie_id, avg_rating FROM ratings WHERE avg_rating > 8.0;
ratings
2
QUERY PLAN     
---------------
Seq Scan on ratings  (cost=0.00..158.96 rows=249 width=16) (actual time=0.005..0.434 rows=249 loops=1)
  Filter: (avg_rating > 8.0)
  Rows Removed by Filter: 7748
Planning Time: 0.034 ms
Execution Time: 0.448 ms
pgshell# explain analyse SELECT movie_id, avg_rating FROM ratings WHERE avg_rating > 8.0;
ratings
2
QUERY PLAN     
---------------
Seq Scan on ratings  (cost=0.00..158.96 rows=249 width=16) (actual time=0.006..0.447 rows=249 loops=1)
  Filter: (avg_rating > 8.0)
  Rows Removed by Filter: 7748
Planning Time: 0.037 ms
Execution Time: 0.458 s











pgshell# explain analyse SELECT movie_id, AVG(avg_rating) AS average_rating
FROM ratings
GROUP BY movie_id;
ratings
1
QUERY PLAN     
---------------
HashAggregate  (cost=178.96..278.92 rows=7997 width=42) (actual time=2.838..4.817 rows=7997 loops=1)
  Group Key: movie_id
  Batches: 1  Memory Usage: 3473kB
  ->  Seq Scan on ratings  (cost=0.00..138.97 rows=7997 width=16) (actual time=0.001..0.304 rows=7997 loops=1)
Planning Time: 0.055 ms
Execution Time: 5.206 ms
pgshell# explain analyse SELECT movie_id, AVG(avg_rating) AS average_rating
FROM ratings
GROUP BY movie_id;
ratings
1
QUERY PLAN     
---------------
HashAggregate  (cost=178.96..278.92 rows=7997 width=42) (actual time=2.565..4.416 rows=7997 loops=1)
  Group Key: movie_id
  Batches: 1  Memory Usage: 3473kB
  ->  Seq Scan on ratings  (cost=0.00..138.97 rows=7997 width=16) (actual time=0.006..0.283 rows=7997 loops=1)
Planning Time: 0.060 ms
Execution Time: 4.809 ms
pgshell# Index (ratings2) created for ratings("movie_id")
explain analyse SELECT movie_id, AVG(avg_rating) AS average_rating
FROM ratings
GROUP BY movie_id;
ratings
1
QUERY PLAN     
---------------
HashAggregate  (cost=178.96..278.92 rows=7997 width=42) (actual time=2.307..4.012 rows=7997 loops=1)
  Group Key: movie_id
  Batches: 1  Memory Usage: 3473kB
  ->  Seq Scan on ratings  (cost=0.00..138.97 rows=7997 width=16) (actual time=0.005..0.256 rows=7997 loops=1)
Planning Time: 0.047 ms
Execution Time: 4.343 ms
pgshell# explain analyse SELECT movie_id, AVG(avg_rating) AS average_rating
FROM ratings
GROUP BY movie_id;
ratings
1
QUERY PLAN     
---------------
HashAggregate  (cost=178.96..278.92 rows=7997 width=42) (actual time=2.290..3.985 rows=7997 loops=1)
  Group Key: movie_id
  Batches: 1  Memory Usage: 3473kB
  ->  Seq Scan on ratings  (cost=0.00..138.97 rows=7997 width=16) (actual time=0.005..0.263 rows=7997 loops=1)
Planning Time: 0.046 ms
Execution Time: 4.305 ms
pgshell# explain analyse SELECT movie_id, AVG(avg_rating) AS average_rating
FROM ratings
GROUP BY movie_id;
ratings
1
QUERY PLAN     
---------------
HashAggregate  (cost=178.96..278.92 rows=7997 width=42) (actual time=2.779..4.466 rows=7997 loops=1)
  Group Key: movie_id
  Batches: 1  Memory Usage: 3473kB
  ->  Seq Scan on ratings  (cost=0.00..138.97 rows=7997 width=16) (actual time=0.007..0.299 rows=7997 loops=1)
Planning Time: 0.061 ms
Execution Time: 4.811 ms
pgshell# explain analyse SELECT movie_id, AVG(avg_rating) AS average_rating
FROM ratings
GROUP BY movie_id;
ratings
1
QUERY PLAN     
---------------
HashAggregate  (cost=178.96..278.92 rows=7997 width=42) (actual time=2.312..4.075 rows=7997 loops=1)
  Group Key: movie_id
  Batches: 1  Memory Usage: 3473kB
  ->  Seq Scan on ratings  (cost=0.00..138.97 rows=7997 width=16) (actual time=0.007..0.259 rows=7997 loops=1)
Planning Time: 0.059 ms
Execution Time: 4.402 ms











pgshell# explain analyse SELECT movie_id
FROM genre
GROUP BY movie_id;
genre
1
QUERY PLAN     
---------------
HashAggregate  (cost=272.27..352.25 rows=7997 width=10) (actual time=2.611..3.193 rows=7997 loops=1)
  Group Key: movie_id
  Batches: 1  Memory Usage: 913kB
  ->  Seq Scan on genre  (cost=0.00..235.62 rows=14662 width=10) (actual time=0.007..0.645 rows=14662 loops=1)
Planning Time: 0.059 ms
Execution Time: 3.526 ms
pgshell# explain analyse SELECT movie_id
FROM genre
GROUP BY movie_id;
genre
1
QUERY PLAN     
---------------
HashAggregate  (cost=272.27..352.25 rows=7997 width=10) (actual time=2.215..2.670 rows=7997 loops=1)
  Group Key: movie_id
  Batches: 1  Memory Usage: 913kB
  ->  Seq Scan on genre  (cost=0.00..235.62 rows=14662 width=10) (actual time=0.005..0.548 rows=14662 loops=1)
Planning Time: 0.050 ms
Execution Time: 2.932 ms
pgshell# explain analyse SELECT movie_id
FROM genre
GROUP BY movie_id;
genre
1
QUERY PLAN     
---------------
HashAggregate  (cost=272.27..352.25 rows=7997 width=10) (actual time=2.555..3.127 rows=7997 loops=1)
  Group Key: movie_id
  Batches: 1  Memory Usage: 913kB
  ->  Seq Scan on genre  (cost=0.00..235.62 rows=14662 width=10) (actual time=0.006..0.631 rows=14662 loops=1)
Planning Time: 0.054 ms
Execution Time: 3.450 ms
pgshell# explain analyse SELECT movie_id
FROM genre
GROUP BY movie_id;
genre
1
QUERY PLAN     
---------------
HashAggregate  (cost=272.27..352.25 rows=7997 width=10) (actual time=1.870..2.259 rows=7997 loops=1)
  Group Key: movie_id
  Batches: 1  Memory Usage: 913kB
  ->  Seq Scan on genre  (cost=0.00..235.62 rows=14662 width=10) (actual time=0.006..0.480 rows=14662 loops=1)
Planning Time: 0.058 ms
Execution Time: 2.499 ms
pgshell# explain analyse SELECT movie_id
FROM genre
GROUP BY movie_id;
genre
1
QUERY PLAN     
---------------
HashAggregate  (cost=272.27..352.25 rows=7997 width=10) (actual time=2.601..3.171 rows=7997 loops=1)
  Group Key: movie_id
  Batches: 1  Memory Usage: 913kB
  ->  Seq Scan on genre  (cost=0.00..235.62 rows=14662 width=10) (actual time=0.006..0.644 rows=14662 loops=1)
Planning Time: 0.055 ms
Execution Time: 3.492 ms
pgshell# explain analyse SELECT movie_id
FROM genre
GROUP BY movie_id;
genre
1
QUERY PLAN     
---------------
HashAggregate  (cost=272.27..352.25 rows=7997 width=10) (actual time=1.768..2.155 rows=7997 loops=1)
  Group Key: movie_id
  Batches: 1  Memory Usage: 913kB
  ->  Seq Scan on genre  (cost=0.00..235.62 rows=14662 width=10) (actual time=0.004..0.435 rows=14662 loops=1)
Planning Time: 0.055 ms
Execution Time: 2.389 ms
pgshell# 







mknined@expectnothing:~/Desktop/Database/CS349-Project/code$ ./run
pgshell# explain analyse SELECT m.title, r.avg_rating
FROM movie m
JOIN ratings r ON m.id = r.movie_id
ORDER BY r.avg_rating DESC
LIMIT 5;
movie
2
ratings
2
QUERY PLAN     
---------------
Limit  (cost=586.73..586.75 rows=5 width=21) (actual time=3.130..3.132 rows=5 loops=1)
  ->  Sort  (cost=586.73..606.73 rows=7997 width=21) (actual time=3.129..3.131 rows=5 loops=1)
        Sort Key: r.avg_rating DESC
        Sort Method: top-N heapsort  Memory: 25kB
        ->  Hash Join  (cost=238.93..453.91 rows=7997 width=21) (actual time=1.029..2.291 rows=7997 loops=1)
              Hash Cond: ((m.id)::text = (r.movie_id)::text)
              ->  Seq Scan on movie m  (cost=0.00..193.97 rows=7997 width=25) (actual time=0.001..0.272 rows=7997 loops=1)
              ->  Hash  (cost=138.97..138.97 rows=7997 width=16) (actual time=1.024..1.024 rows=7997 loops=1)
                    Buckets: 8192  Batches: 1  Memory Usage: 446kB
                    ->  Seq Scan on ratings r  (cost=0.00..138.97 rows=7997 width=16) (actual time=0.002..0.348 rows=7997 loops=1)
Planning Time: 0.640 ms
Execution Time: 3.142 ms
pgshell# explain analyse SELECT m.title, r.avg_rating
FROM movie m
JOIN ratings r ON m.id = r.movie_id
ORDER BY r.avg_rating DESC
LIMIT 5;
movie
2
ratings
2
Index (movie2) created for movie("id", "title")
QUERY PLAN     
---------------
Limit  (cost=586.73..586.75 rows=5 width=21) (actual time=2.938..2.940 rows=5 loops=1)
  ->  Sort  (cost=586.73..606.73 rows=7997 width=21) (actual time=2.937..2.939 rows=5 loops=1)
        Sort Key: r.avg_rating DESC
        Sort Method: top-N heapsort  Memory: 25kB
        ->  Hash Join  (cost=238.93..453.91 rows=7997 width=21) (actual time=0.964..2.167 rows=7997 loops=1)
              Hash Cond: ((m.id)::text = (r.movie_id)::text)
              ->  Seq Scan on movie m  (cost=0.00..193.97 rows=7997 width=25) (actual time=0.003..0.260 rows=7997 loops=1)
              ->  Hash  (cost=138.97..138.97 rows=7997 width=16) (actual time=0.954..0.954 rows=7997 loops=1)
                    Buckets: 8192  Batches: 1  Memory Usage: 446kB
                    ->  Seq Scan on ratings r  (cost=0.00..138.97 rows=7997 width=16) (actual time=0.002..0.350 rows=7997 loops=1)
Planning Time: 0.117 ms
Execution Time: 2.952 ms
pgshell# Failed to create index: ERROR:  column "id" does not exist

explain analyse SELECT m.title, r.avg_rating
FROM movie m
JOIN ratings r ON m.id = r.movie_id
ORDER BY r.avg_rating DESC
LIMIT 5;
movie
2
ratings
2
QUERY PLAN     
---------------
Limit  (cost=586.73..586.75 rows=5 width=21) (actual time=2.994..2.996 rows=5 loops=1)
  ->  Sort  (cost=586.73..606.73 rows=7997 width=21) (actual time=2.994..2.995 rows=5 loops=1)
        Sort Key: r.avg_rating DESC
        Sort Method: top-N heapsort  Memory: 25kB
        ->  Hash Join  (cost=238.93..453.91 rows=7997 width=21) (actual time=0.979..2.225 rows=7997 loops=1)
              Hash Cond: ((m.id)::text = (r.movie_id)::text)
              ->  Seq Scan on movie m  (cost=0.00..193.97 rows=7997 width=25) (actual time=0.002..0.266 rows=7997 loops=1)
              ->  Hash  (cost=138.97..138.97 rows=7997 width=16) (actual time=0.969..0.970 rows=7997 loops=1)
                    Buckets: 8192  Batches: 1  Memory Usage: 446kB
                    ->  Seq Scan on ratings r  (cost=0.00..138.97 rows=7997 width=16) (actual time=0.002..0.368 rows=7997 loops=1)
Planning Time: 0.107 ms
Execution Time: 3.008 ms
pgshell# 














mknined@expectnothing:~/Desktop/Database/CS349-Project/code$ ./run
pgshell# explain analyse SELECT FLOOR(EXTRACT(YEAR FROM date_of_birth) / 10) * 10 AS birth_decade,
       AVG(height) AS avg_height
FROM names
WHERE height IS NOT NULL AND date_of_birth IS NOT NULL
GROUP BY birth_decade
ORDER BY birth_decade;
QUERY PLAN     
---------------
Sort  (cost=806.22..814.94 rows=3487 width=64) (actual time=3.090..3.090 rows=14 loops=1)
  Sort Key: ((floor((EXTRACT(year FROM date_of_birth) / '10'::numeric)) * '10'::numeric))
  Sort Method: quicksort  Memory: 25kB
  ->  HashAggregate  (cost=522.59..601.05 rows=3487 width=64) (actual time=3.076..3.082 rows=14 loops=1)
        Group Key: (floor((EXTRACT(year FROM date_of_birth) / '10'::numeric)) * '10'::numeric)
        Batches: 1  Memory Usage: 121kB
        ->  Seq Scan on names  (cost=0.00..502.51 rows=4016 width=36) (actual time=0.006..2.425 rows=6505 loops=1)
              Filter: ((height IS NOT NULL) AND (date_of_birth IS NOT NULL))
              Rows Removed by Filter: 19230
Planning Time: 0.065 ms
Execution Time: 3.106 ms
pgshell# explain analyse SELECT FLOOR(EXTRACT(YEAR FROM date_of_birth) / 10) * 10 AS birth_decade,
       AVG(height) AS avg_height
FROM names
WHERE height IS NOT NULL AND date_of_birth IS NOT NULL
GROUP BY birth_decade
ORDER BY birth_decade;
QUERY PLAN     
---------------
Sort  (cost=806.22..814.94 rows=3487 width=64) (actual time=3.436..3.437 rows=14 loops=1)
  Sort Key: ((floor((EXTRACT(year FROM date_of_birth) / '10'::numeric)) * '10'::numeric))
  Sort Method: quicksort  Memory: 25kB
  ->  HashAggregate  (cost=522.59..601.05 rows=3487 width=64) (actual time=3.424..3.431 rows=14 loops=1)
        Group Key: (floor((EXTRACT(year FROM date_of_birth) / '10'::numeric)) * '10'::numeric)
        Batches: 1  Memory Usage: 121kB
        ->  Seq Scan on names  (cost=0.00..502.51 rows=4016 width=36) (actual time=0.007..2.677 rows=6505 loops=1)
              Filter: ((height IS NOT NULL) AND (date_of_birth IS NOT NULL))
              Rows Removed by Filter: 19230
Planning Time: 0.035 ms
Execution Time: 3.452 ms
pgshell# explain analyse SELECT FLOOR(EXTRACT(YEAR FROM date_of_birth) / 10) * 10 AS birth_decade,
       AVG(height) AS avg_height
FROM names
WHERE height IS NOT NULL AND date_of_birth IS NOT NULL
GROUP BY birth_decade
ORDER BY birth_decade;
QUERY PLAN     
---------------
Sort  (cost=806.22..814.94 rows=3487 width=64) (actual time=2.800..2.800 rows=14 loops=1)
  Sort Key: ((floor((EXTRACT(year FROM date_of_birth) / '10'::numeric)) * '10'::numeric))
  Sort Method: quicksort  Memory: 25kB
  ->  HashAggregate  (cost=522.59..601.05 rows=3487 width=64) (actual time=2.789..2.795 rows=14 loops=1)
        Group Key: (floor((EXTRACT(year FROM date_of_birth) / '10'::numeric)) * '10'::numeric)
        Batches: 1  Memory Usage: 121kB
        ->  Seq Scan on names  (cost=0.00..502.51 rows=4016 width=36) (actual time=0.005..2.187 rows=6505 loops=1)
              Filter: ((height IS NOT NULL) AND (date_of_birth IS NOT NULL))
              Rows Removed by Filter: 19230
Planning Time: 0.027 ms
Execution Time: 2.812 ms
pgshell# explain analyse SELECT FLOOR(EXTRACT(YEAR FROM date_of_birth) / 10) * 10 AS birth_decade,
       AVG(height) AS avg_height
FROM names
WHERE height IS NOT NULL AND date_of_birth IS NOT NULL
GROUP BY birth_decade
ORDER BY birth_decade;
QUERY PLAN     
---------------
Sort  (cost=806.22..814.94 rows=3487 width=64) (actual time=2.891..2.891 rows=14 loops=1)
  Sort Key: ((floor((EXTRACT(year FROM date_of_birth) / '10'::numeric)) * '10'::numeric))
  Sort Method: quicksort  Memory: 25kB
  ->  HashAggregate  (cost=522.59..601.05 rows=3487 width=64) (actual time=2.880..2.886 rows=14 loops=1)
        Group Key: (floor((EXTRACT(year FROM date_of_birth) / '10'::numeric)) * '10'::numeric)
        Batches: 1  Memory Usage: 121kB
        ->  Seq Scan on names  (cost=0.00..502.51 rows=4016 width=36) (actual time=0.006..2.266 rows=6505 loops=1)
              Filter: ((height IS NOT NULL) AND (date_of_birth IS NOT NULL))
              Rows Removed by Filter: 19230
Planning Time: 0.033 ms
Execution Time: 2.905 ms
pgshell# explain analyse SELECT FLOOR(EXTRACT(YEAR FROM date_of_birth) / 10) * 10 AS birth_decade,
       AVG(height) AS avg_height
FROM names
WHERE height IS NOT NULL AND date_of_birth IS NOT NULL
GROUP BY birth_decade
ORDER BY birth_decade;
QUERY PLAN     
---------------
Sort  (cost=806.22..814.94 rows=3487 width=64) (actual time=2.840..2.841 rows=14 loops=1)
  Sort Key: ((floor((EXTRACT(year FROM date_of_birth) / '10'::numeric)) * '10'::numeric))
  Sort Method: quicksort  Memory: 25kB
  ->  HashAggregate  (cost=522.59..601.05 rows=3487 width=64) (actual time=2.828..2.835 rows=14 loops=1)
        Group Key: (floor((EXTRACT(year FROM date_of_birth) / '10'::numeric)) * '10'::numeric)
        Batches: 1  Memory Usage: 121kB
        ->  Seq Scan on names  (cost=0.00..502.51 rows=4016 width=36) (actual time=0.006..2.223 rows=6505 loops=1)
              Filter: ((height IS NOT NULL) AND (date_of_birth IS NOT NULL))
              Rows Removed by Filter: 19230
Planning Time: 0.031 ms
Execution Time: 2.855 ms
pgshell# explain analyse SELECT FLOOR(EXTRACT(YEAR FROM date_of_birth) / 10) * 10 AS birth_decade,
       AVG(height) AS avg_height
FROM names
WHERE height IS NOT NULL AND date_of_birth IS NOT NULL
GROUP BY birth_decade
ORDER BY birth_decade;
QUERY PLAN     
---------------
Sort  (cost=806.22..814.94 rows=3487 width=64) (actual time=2.922..2.923 rows=14 loops=1)
  Sort Key: ((floor((EXTRACT(year FROM date_of_birth) / '10'::numeric)) * '10'::numeric))
  Sort Method: quicksort  Memory: 25kB
  ->  HashAggregate  (cost=522.59..601.05 rows=3487 width=64) (actual time=2.911..2.917 rows=14 loops=1)
        Group Key: (floor((EXTRACT(year FROM date_of_birth) / '10'::numeric)) * '10'::numeric)
        Batches: 1  Memory Usage: 121kB
        ->  Seq Scan on names  (cost=0.00..502.51 rows=4016 width=36) (actual time=0.006..2.294 rows=6505 loops=1)
              Filter: ((height IS NOT NULL) AND (date_of_birth IS NOT NULL))
              Rows Removed by Filter: 19230
Planning Time: 0.030 ms
Execution Time: 2.935 ms
pgshell# 
















mknined@expectnothing:~/Desktop/Database/CS349-Project/code$ ./run
pgshell# explain analyse SELECT m.title, r.total_votes
FROM movie m
JOIN ratings r ON m.id = r.movie_id
WHERE r.total_votes > 50000
ORDER BY r.total_votes DESC;
movie
2
ratings
2
QUERY PLAN     
---------------
Sort  (cost=385.72..386.29 rows=228 width=19) (actual time=1.297..1.305 rows=223 loops=1)
  Sort Key: r.total_votes DESC
  Sort Method: quicksort  Memory: 35kB
  ->  Hash Join  (cost=161.81..376.79 rows=228 width=19) (actual time=0.349..1.253 rows=223 loops=1)
        Hash Cond: ((m.id)::text = (r.movie_id)::text)
        ->  Seq Scan on movie m  (cost=0.00..193.97 rows=7997 width=25) (actual time=0.001..0.371 rows=7997 loops=1)
        ->  Hash  (cost=158.96..158.96 rows=228 width=14) (actual time=0.329..0.330 rows=223 loops=1)
              Buckets: 1024  Batches: 1  Memory Usage: 19kB
              ->  Seq Scan on ratings r  (cost=0.00..158.96 rows=228 width=14) (actual time=0.003..0.304 rows=223 loops=1)
                    Filter: (total_votes > 50000)
                    Rows Removed by Filter: 7774
Planning Time: 0.251 ms
Execution Time: 1.320 ms
pgshell# explain analyse SELECT m.title, r.total_votes
FROM movie m
JOIN ratings r ON m.id = r.movie_id
WHERE r.total_votes > 50000
ORDER BY r.total_votes DESC;
movie
2
ratings
2
Index (movie2) created for movie("id", "title")
QUERY PLAN     
---------------
Sort  (cost=385.72..386.29 rows=228 width=19) (actual time=0.976..0.983 rows=223 loops=1)
  Sort Key: r.total_votes DESC
  Sort Method: quicksort  Memory: 35kB
  ->  Hash Join  (cost=161.81..376.79 rows=228 width=19) (actual time=0.307..0.940 rows=223 loops=1)
        Hash Cond: ((m.id)::text = (r.movie_id)::text)
        ->  Seq Scan on movie m  (cost=0.00..193.97 rows=7997 width=25) (actual time=0.002..0.255 rows=7997 loops=1)
        ->  Hash  (cost=158.96..158.96 rows=228 width=14) (actual time=0.289..0.289 rows=223 loops=1)
              Buckets: 1024  Batches: 1  Memory Usage: 19kB
              ->  Seq Scan on ratings r  (cost=0.00..158.96 rows=228 width=14) (actual time=0.004..0.267 rows=223 loops=1)
                    Filter: (total_votes > 50000)
                    Rows Removed by Filter: 7774
Planning Time: 0.112 ms
Execution Time: 0.999 ms
pgshell# Failed to create index: ERROR:  column "id" does not exist

explain analyse SELECT m.title, r.total_votes
FROM movie m
JOIN ratings r ON m.id = r.movie_id
WHERE r.total_votes > 50000
ORDER BY r.total_votes DESC;
movie
2
ratings
2
QUERY PLAN     
---------------
Sort  (cost=385.72..386.29 rows=228 width=19) (actual time=0.994..1.002 rows=223 loops=1)
  Sort Key: r.total_votes DESC
  Sort Method: quicksort  Memory: 35kB
  ->  Hash Join  (cost=161.81..376.79 rows=228 width=19) (actual time=0.286..0.964 rows=223 loops=1)
        Hash Cond: ((m.id)::text = (r.movie_id)::text)
        ->  Seq Scan on movie m  (cost=0.00..193.97 rows=7997 width=25) (actual time=0.002..0.259 rows=7997 loops=1)
        ->  Hash  (cost=158.96..158.96 rows=228 width=14) (actual time=0.267..0.267 rows=223 loops=1)
              Buckets: 1024  Batches: 1  Memory Usage: 19kB
              ->  Seq Scan on ratings r  (cost=0.00..158.96 rows=228 width=14) (actual time=0.004..0.247 rows=223 loops=1)
                    Filter: (total_votes > 50000)
                    Rows Removed by Filter: 7774
Planning Time: 0.121 ms
Execution Time: 1.018 ms
pgshell# explain analyse SELECT m.title, r.total_votes
FROM movie m
JOIN ratings r ON m.id = r.movie_id
WHERE r.total_votes > 50000
ORDER BY r.total_votes DESC;
movie
2
ratings
2
QUERY PLAN     
---------------
Sort  (cost=385.72..386.29 rows=228 width=19) (actual time=0.957..0.964 rows=223 loops=1)
  Sort Key: r.total_votes DESC
  Sort Method: quicksort  Memory: 35kB
  ->  Hash Join  (cost=161.81..376.79 rows=228 width=19) (actual time=0.304..0.926 rows=223 loops=1)
        Hash Cond: ((m.id)::text = (r.movie_id)::text)
        ->  Seq Scan on movie m  (cost=0.00..193.97 rows=7997 width=25) (actual time=0.002..0.242 rows=7997 loops=1)
        ->  Hash  (cost=158.96..158.96 rows=228 width=14) (actual time=0.285..0.285 rows=223 loops=1)
              Buckets: 1024  Batches: 1  Memory Usage: 19kB
              ->  Seq Scan on ratings r  (cost=0.00..158.96 rows=228 width=14) (actual time=0.003..0.253 rows=223 loops=1)
                    Filter: (total_votes > 50000)
                    Rows Removed by Filter: 7774
Planning Time: 0.103 ms
Execution Time: 0.979 ms
pgshell# \show
Table Name: movie Attribute Name: id Number of Accesses: 4
Table Name: movie Attribute Name: title Number of Accesses: 4
Table Name: ratings Attribute Name: movie_id Number of Accesses: 4
Table Name: ratings Attribute Name: total_votes Number of Accesses: 4
pgshell# 

















ImDB=# EXPLAIN ANALYZE SELECT title FROM movie WHERE year = 2020;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Seq Scan on movie  (cost=0.00..213.96 rows=1 width=15) (actual time=1.054..1.054 rows=0 loops=1)
   Filter: (year = 2020)
   Rows Removed by Filter: 7997
 Planning Time: 0.236 ms
 Execution Time: 1.070 ms
(5 rows)

ImDB=# CREATE INDEX idx_movie_year ON movie(year);
CREATE INDEX
ImDB=# EXPLAIN ANALYZE SELECT title FROM movie WHERE year = 2020;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_movie_year on movie  (cost=0.28..4.30 rows=1 width=15) (actual time=0.023..0.024 rows=0 loops=1)
   Index Cond: (year = 2020)
 Planning Time: 0.241 ms
 Execution Time: 0.042 ms
(4 rows)

ImDB=# 

















ImDB=# EXPLAIN ANALYZE SELECT movie_id, avg_rating FROM ratings WHERE avg_rating = 8.5;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Seq Scan on ratings  (cost=0.00..158.96 rows=19 width=16) (actual time=0.041..1.829 rows=19 loops=1)
   Filter: (avg_rating = 8.5)
   Rows Removed by Filter: 7978
 Planning Time: 0.150 ms
 Execution Time: 1.849 ms
(5 rows)

ImDB=# CREATE INDEX idx_ratings_avg_rating ON ratings(avg_rating);
CREATE INDEX
ImDB=# EXPLAIN ANALYZE SELECT movie_id, avg_rating FROM ratings WHERE avg_rating = 8.5;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on ratings  (cost=4.43..45.29 rows=19 width=16) (actual time=0.060..0.090 rows=19 loops=1)
   Recheck Cond: (avg_rating = 8.5)
   Heap Blocks: exact=16
   ->  Bitmap Index Scan on idx_ratings_avg_rating  (cost=0.00..4.42 rows=19 width=0) (actual time=0.045..0.045 rows=19 loops=1)
         Index Cond: (avg_rating = 8.5)
 Planning Time: 0.300 ms
 Execution Time: 0.116 ms
(7 rows)

ImDB=# 
















ImDB=# EXPLAIN ANALYZE SELECT name FROM names WHERE height = 180;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Seq Scan on names  (cost=0.00..526.69 rows=55 width=14) (actual time=0.023..2.973 rows=55 loops=1)
   Filter: (height = 180)
   Rows Removed by Filter: 25680
 Planning Time: 0.093 ms
 Execution Time: 3.004 ms
(5 rows)

ImDB=# CREATE INDEX idx_names_height ON names(height);
CREATE INDEX
ImDB=# EXPLAIN ANALYZE SELECT name FROM names WHERE height = 180;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on names  (cost=4.71..129.53 rows=55 width=14) (actual time=0.045..0.089 rows=55 loops=1)
   Recheck Cond: (height = 180)
   Heap Blocks: exact=16
   ->  Bitmap Index Scan on idx_names_height  (cost=0.00..4.70 rows=55 width=0) (actual time=0.028..0.029 rows=55 loops=1)
         Index Cond: (height = 180)
 Planning Time: 0.304 ms
 Execution Time: 0.121 ms
(7 rows)

ImDB=# 















ImDB=# EXPLAIN ANALYZE SELECT movie_id FROM genre WHERE genre = 'Action';
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Seq Scan on genre  (cost=0.00..272.27 rows=1289 width=10) (actual time=0.016..2.209 rows=1289 loops=1)
   Filter: ((genre)::text = 'Action'::text)
   Rows Removed by Filter: 13373
 Planning Time: 0.126 ms
 Execution Time: 2.303 ms
(5 rows)

ImDB=# CREATE INDEX idx_genre_genre ON genre(genre);
CREATE INDEX
ImDB=# EXPLAIN ANALYZE SELECT movie_id FROM genre WHERE genre = 'Action';
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on genre  (cost=18.27..123.39 rows=1289 width=10) (actual time=0.108..0.652 rows=1289 loops=1)
   Recheck Cond: ((genre)::text = 'Action'::text)
   Heap Blocks: exact=89
   ->  Bitmap Index Scan on idx_genre_genre  (cost=0.00..17.95 rows=1289 width=0) (actual time=0.080..0.080 rows=1289 loops=1)
         Index Cond: ((genre)::text = 'Action'::text)
 Planning Time: 0.276 ms
 Execution Time: 0.777 ms
(7 rows)

ImDB=# 











pgshell# EXPLAIN ANALYZE SELECT movie_id, avg_rating FROM ratings WHERE avg_rating = 8.5;
ratings
2
QUERY PLAN     
---------------
Seq Scan on ratings  (cost=0.00..158.96 rows=19 width=16) (actual time=0.009..0.440 rows=19 loops=1)
  Filter: (avg_rating = 8.5)
  Rows Removed by Filter: 7978
Planning Time: 0.028 ms
Execution Time: 0.443 ms
pgshell# EXPLAIN ANALYZE SELECT movie_id, avg_rating FROM ratings WHERE avg_rating = 8.5;
ratings
2
QUERY PLAN     
---------------
Seq Scan on ratings  (cost=0.00..158.96 rows=19 width=16) (actual time=0.014..0.550 rows=19 loops=1)
  Filter: (avg_rating = 8.5)
  Rows Removed by Filter: 7978
Planning Time: 0.037 ms
Execution Time: 0.558 ms
pgshell# Index (ratings2) created for ratings("avg_rating", "movie_id")
EXPLAIN ANALYZE SELECT movie_id, avg_rating FROM ratings WHERE avg_rating = 8.5;
ratings
2